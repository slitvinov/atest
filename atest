#!/bin/sh

: ${AWK=awk}

me=atest
usg () {
    msg "$me [FILE].."
    msg "run atests in [FILE].."
    exit 1
}

msg () { echo >&2 "$@" ; }
err () { msg "$me: $@"; exit 2 ; }

if test $# -ne 0 && test $1 = -h; then usg; fi
for i
do if ! test -f "$i"
   then err "not a file '$i'"
   fi
done

"$AWK" '
BEGIN {
    PWD=ENVIRON["PWD"]
    if ("ATEST_DIR" in ENVIRON)
        RDIR= ENVIRON["ATEST_DIR"]
    else
        RDIR = "test_data"
    mkdir(RDIR)
    ipass = ifail = icreated = 0 # counters
}

function mkdir(d,   c) {
    c = sprintf("mkdir -p %s", d)
    system(c)
}

function emptyp(s) { return s ~ /^[ \t]*$/ }
function after_comm(s,   i) { # returns a part of a string after #
    ICOMM = index(s, "#")     # sets global ICOMM: position of a first #
    return substr(s, ICOMM + 1)
}

function set_line(i,   j, s) { F[i] = s; FILE_NR[i] = j }
# new file predicate?
function new_filep(i) { return FILE_NR[i] == 1}
function get_line(i) { return F[i] }
function begp(i,  s, a) { # is beginning of a test? sets NAME and
		          # sets TYPE of a test
    s = get_line(i)
    s = after_comm(s)
    if (ICOMM == 0) return 0
    split(s, a); s = a[1]
    if      (s ==   "TEST:") {NAME = a[2]; TYPE = type(s); return 1}
    else if (s ==  "cTEST:") {NAME = a[2]; TYPE = type(s); return 1}
    else if (s ==  "nTEST:") {NAME = a[2]; TYPE = type(s); return 1}
    else                                   return 0
}

function type(s) {
    return "ATEST_C" in ENVIRON ? "cTEST:" : s
}

function endp(i,  s) { # is end of a test?
    if (new_filep(i)) return 1
    s = get_line(i)
    s = after_comm(s)
    if (FNR == 1 || emptyp(s)) return 1 # empty line or a new file end test
    return 0
}

function find_magic(base,  nb, d) { # a name of magic file *.base.*
    nb = "[^ \\t\\n]*" # zero or more non-blanks
    d  = "\\."        # dot
    match(BODY, nb d base d nb)
    return substr(BODY, RSTART, RLENGTH)
}

function process(   out) {
    out  = find_magic("out")
    if      (TYPE ==   "TEST:") {CMP = "cmp -s --"; run(out)}
    else if (TYPE ==  "cTEST:") {CMP = "cmp -s --"; create(out)}
    else if (TYPE ==  "nTEST:") {CMP = "ucmp";      run(out)}
}

function run(out) {
    Test(out)
    msg("RUNNING: " NAME)
    if (!exec()) {
	ipass++
	msg("PASSED : " NAME)
    } else {
	lfail[++ifail] = NAME # a list of failed test names
	msg("FAILED : " NAME "\n\n" BODY)
    }
}

function create(out) {
    cTest(out)
    msg("CREATING: " NAME "\n\n" BODY)
    if (exec() != 0)
       err("fail to create a test")
    icreated++
}

function out2out(s) {
    d  = "\\."        # dot
    sub(d "out" d,   ".out." NAME ".",    s)
    return PWD "/" RDIR "/" s
}

function out2ref(s) {
    d  = "\\."        # dot
    sub(d "out" d,   ".ref." NAME ".",    s)
    return PWD "/" RDIR "/" s
}


function cp(A, B,  cmd) {
    cmd = sprintf("cp -- %s %s\n", q(A), q(B))
    BODY = BODY cmd
}

function cmp(A, B,  cmd) {
    cmd = sprintf("%s %s %s\n", CMP, q(A), q(B))
    BODY = BODY cmd
}

function cTest(out) { # add commands to BODY
    BODY = BODY "\n\n"
    cp(out, out2ref(out)) # use out as ref
}

function Test(out,    ref) { # add commands to BODY
    BODY = BODY "\n\n"
    cmp(out ,  out2ref(out))
}

function process_all(  I, sep) {
    I = 1 # position in a file
    for (;;) {
	# between tests
	for (;;) {
	    if (I > NR)      break
	    if (begp(I++)) break
	}
	if (I > NR) break

	# test
	BODY = sep = ""
	for (;;) {
	    if (I > NR)  break
	    if (endp(I)) break
	    line = get_line(I)
	    BODY = BODY sep after_comm(line); I++
	    sep  = RS
	}
	process()
    }
}

function summary(  i) {
    msg(sprintf("%d/%d test(s) passed", ipass, ipass+ifail))
    if (icreated) msg(sprintf("   %d test(s) created", icreated))
    if (ifail) {
	msg("failed tests:")
	for (i = 1; i <= ifail; i++) msg("    " lfail[i])
    }
}

{ set_line(NR,   FNR, $0) }
END {
    process_all() # extract and run all tests
    summary()
}

function q(s)    { return "\"" s "\"" }
function exec()  { return system(BODY) }
function msg(s) { printf "atest: %s\n", s | "cat >&2" }
function err(s) { msg(s); exit(2) }
' "$@"
